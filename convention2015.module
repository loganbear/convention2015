<?php

/**
 * @file
 * Special customization for DignityUSA Convention 2015 and CiviCRM
 **/

/**
 * This hook is called after a db write on some core objects.
 *
 * Parameters:
 * $op - operation being performed with CiviCRM object. Can have the following values:
 *      'view' : The CiviCRM object is going to be displayed
 *      'create' : The CiviCRM object is created (or contacts are being added to a group)
 *      'edit' : The CiviCRM object is edited *      
 *      'delete' : The CiviCRM object is being deleted (or contacts are being removed from a group)
 *      'trash': The contact is being moved to trash (Contact objects only)
 *      'restore': The contact is being restored from trash (Contact objects only)
 * $objectName - can have the following values:
 *      'Activity'
 *      'Address'
 *      'Case'
 *      'Contribution'
 *      'ContributionRecur'
 *      'CRM_Mailing_DAO_Spool'
 *      'Email'
 *      'Event'
 *      'EntityTag'
 *      'Individual'
 *      'Household'
 *      'Organization'
 *      'Grant'
 *      'Group'
 *      'GroupContact'
 *      'LineItem'
 *      'Membership'
 *      'MembershipPayment'
 *      'Participant'
 *      'ParticipantPayment'
 *      'Phone'
 *      'Pledge'
 *      'PledgePayment'
 *      'Profile' (while this is not really an object, people have expressed an interest to perform an action when a profile is created/edited)
 *      'Relationship'
 *      'Tag'
 *      'UFMatch' (when an object is linked to a CMS user record, at the request of GordonH. A UFMatch object is passed for both the pre and post hooks)
 *
 * $objectId - the unique identifier for the object. tagID in case of EntityTag
 * $objectRef - the reference to the object if available. For case of EntityTag it is an array of (entityTable, entityIDs)
 * Returns
 * None
 */

function convention2015_civicrm_post($op, $objectName, $objectId, &$objectRef) {
// LineItems are for participant of individual items    
    if ( $objectName == 'LineItem' && $op == 'create' ) {
//        CRM_Core_Error::debug('Line Item', $objectRef);
//        exit;
        $field_id = $objectRef['price_field_id'];
        $field_value_id = $objectRef['price_field_value_id'];
        // Check for Convention Registration
        if ( ($field_id >= 110) && ( $field_id <= 112) ) {
            convention2015_newParticipant(65, $objectRef);
        }
        // Boat Cruise
        if ($field_id == 120) {
            convention2015_newParticipant(66, $objectRef);
        }
        // Tillicum Village
        if ( ($field_id == 121) || ($field_id == 122) ) {
            convention2015_newParticipant(67, $objectRef);
        }
        // One Day Events
        if ($field_id == 123) {
            convention2015_newParticipant($field_value_id - 245, $objectRef);
        }        
    }

// We also have to check to see if there's an participant which is not a pay later check for other
    if ( $objectName == 'Participant' ) {
        $dao = &CRM_Core_DAO::executeQuery("UPDATE civicrm_participant p1
                                            JOIN convention_events e1 ON e1.sub_event_id = p1.id
                                            SET p1.status_id = " . $participant['status_id']
                                            . "WHERE e1.primary_event_id = " . $participant['id']);
    }
        
}

function convention2015_newParticipant($eventNum, &$LineItem) {
    $params = array('id' => $LineItem['entity_id'],
                    'sequential' => 1,
                    );
    $result = civicrm_api3('participant', 'getsingle', $params);
    $newEvent = array('participant_contact_id'      => $result['contact_id'],
                      'event_id'                    => $eventNum,
                      'participant_status_id'       => $result['participant_status_id'],
                      'participant_role_id'         => $result['participant_role_id'],
                      'participant_register_date'   => $result['participant_register_date'],
                      'participant_source'          => $result['participant_source'],
                      'participant_fee_level'       => $LineItem['label'],
                      'participant_is_test'         => $result['participant_is_test'],
                      'participant_is_pay_later'    => $result['participant_is_pay_later'],
                      'participant_fee_amount'      => $LineItem['line_total'],
                      'participant_registered_by_id' => $result['participant_registered_by_id'],
                      'participant_fee_currency'    => $result['participant_fee_currency'],
                      'participant_campaign_id'     => $result['participant_campaign_id'],
                      'sequential'                  => 1,
                     );
    $newResult = civicrm_api3('participant', 'create', $newEvent);
    
    $pmtParams = array('participant_id' => $newResult['id'],
                       'contribution_id' => $LineItem['contribution_id'],
                       'sequential' => 1,
                      );
    $nextResult = civicrm_api3('participantPayment', 'create', $pmtParams);
    
    
    
    $dao = &CRM_Core_DAO::executeQuery("INSERT INTO convention_events
                                       (primary_event_id, sub_event_id)
                                       VALUES(" . $result['id'] . ", " . $newResult['id'] . ")");
    
    $params = array('entity_table'  => 'civicrm_participant',
                    'entity_id'     => $newResult['id'],
                    'sequential'    => 1,
                   );
    try {
        $newLineItem = civicrm_api3('lineItem','getsingle', $params);
        unset($newLineItem['is_error']);
        $newLineItem['contribution_id']     = $LineItem['contribution_id'];
        $newLineItem['financial_type_id']   = $LineItem['financial_type_id'];
        $newLineItem['qty']                 = $LineItem['qty'];
        $newLineItem['line_total']          = $LineItem['line_total'];
        $newLineItem['participant_count']   = $LineItem['participant_count'];
    } catch (Exception $e) {
        $newLineItem = array(
                             'price_field_id'       => $eventNum + 138,
                             'price_field_value_id' => $eventNum + 505,
                             'contribution_id'      => $LineItem['contribution_id'],
                             'financial_type_id'    => $LineItem['financial_type_id'],
                             'qty'                  => $LineItem['qty'],
                             'line_total'           => $LineItem['line_total'],
                             'entity_table'         => $LineItem['entity_table'],
                             'entity_id'            => $eventNum,
                             'unit_price'           => $LineItem['unit_price'],
                             'participant_count'    => $LineItem['participant_count'],
//                             'deductible_amount'    => $LineItem['deductible_amount'],
                             'label'                => $LineItem['label'],
                            );
    } 
    $newResult = civicrm_api3('lineItem','create',$newLineItem);
    
}    

function convention2015_payup(&$participant) {
    $dao = &CRM_Core_DAO::executeQuery("SELECT * FROM convention_events WHERE primary_event_id = " . $participant['id']);
    $dao = &CRM_Core_DAO::executeQuery("UPDATE civicrm_participant p1
                                       JOIN convention_events e1 ON e1.sub_event_id = p1.id
                                       SET p1.status_id = 1
                                       WHERE e1.primary_event_id = " . $participant['id']);
    while ($dao->fetch()) {
        $params = array('id'         => $dao->id,
                        'sequential' => 1,
                       );
        try {
            $newParticipant = civicrm_api3('participant' , 'getsingle', $params);
            unset($newParticipant['is_error']);
            $newParticipant['participant_status_id'] = $participant['participant_status_id'];
            $result = civicrm_api3('participant', 'create', $newParticipant);
        }
        catch (Exception $e) {
        }
    }
                  
}
